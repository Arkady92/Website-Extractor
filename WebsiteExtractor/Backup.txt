using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Media;
using System.Text;
using System.Windows;
using System.Windows.Media;
using System.Windows.Threading;

namespace WebSiteExtractor
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        List<string> pages;
        int finish = 2;
        bool first = true;
        int pageNumber = 0;
        int sitesExtracted = 0;
        DispatcherTimer dispatcherTimer;
        Uri musicUri;
        private const int MaxCount = 100;
        private bool blocker;
        private bool extractionStop;

        public MainWindow()
        {
            InitializeComponent();
            dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Tick += dispatcherTimer_Tick;
            dispatcherTimer.Interval = new TimeSpan(0, 0, 0, 0, 500);
            pages = new List<string>();
            musicUri = new Uri(@"Resources/ImportantResource.mp3", UriKind.Relative);

            if (Process.GetProcesses().Any(p => p.ProcessName.Contains("firefox")))
                first = false;
        }

        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            if (finish == 0 || extractionStop)
            {
                dispatcherTimer.Stop();
                Close();
                return;
            }
            if (pages.Count <= pageNumber)
            {
                finish--;
                return;
            }
            else
                TryExtractPage(pages[pageNumber++]);
            ShowExtractionProgress();
        }

        private String GetContent(String address)
        {
            var webClient = new System.Net.WebClient();
            var webData = webClient.DownloadString(address);
            var beginPosition = webData.IndexOf("<body>", StringComparison.InvariantCulture);
            if (beginPosition < 0) return null;
            beginPosition = webData.IndexOf("<div id=\"content\">", beginPosition, StringComparison.InvariantCulture);
            if (beginPosition < 0) return null;
            beginPosition = webData.IndexOf("<div class=\"object\">", beginPosition, StringComparison.InvariantCulture);
            if (beginPosition < 0) return null;
            beginPosition = webData.IndexOf("src=\"", beginPosition, StringComparison.InvariantCulture);
            if (beginPosition < 0) return null;
            beginPosition += 5;
            var endPosition = webData.IndexOf("\"", beginPosition, StringComparison.InvariantCulture);
            if (beginPosition < 0) return null;
            var length = endPosition - beginPosition;
            return webData.Substring(beginPosition, length);
        }

        private void ExtractSite(string address)
        {
            var url = GetContent(address);
            if (url == null)
                url = address;
            if (url.Contains(".mp4"))
                System.Diagnostics.Process.Start("iexplore", url);
            else
            {
                System.Diagnostics.Process.Start("firefox.exe", address);
                if (first)
                {
                    first = false;
                    System.Threading.Thread.Sleep(5000);
                }
            }
            sitesExtracted++;
        }

        private void ReadPages()
        {
            pages = new List<string>();
            using (StringReader stringReader = new StringReader(Clipboard.GetText()))
            {
                for (int counter = 0; counter < MaxCount; counter++)
                {
                    var line = stringReader.ReadLine();
                    if (line == null) break;
                    if (!line.Any()) continue;
                    while (true)
                    {
                        var beginPosition = line.IndexOf("http", StringComparison.Ordinal);
                        if (beginPosition < 0) break;
                        var endPosition = line.IndexOf(" ", beginPosition, StringComparison.Ordinal);
                        if (endPosition < 0) endPosition = line.IndexOf("http", beginPosition + 4, StringComparison.Ordinal);
                        if (endPosition < 0) endPosition = line.IndexOf("\n", StringComparison.Ordinal);
                        if (endPosition < 0) endPosition = line.Length;
                        pages.Add(line.Substring(beginPosition, endPosition - beginPosition));
                        if (endPosition > line.Length - 5) break;
                        line = line.Substring(endPosition);
                    }
                }
            }
            GenerateClipboardResult();
            dispatcherTimer.Start();
        }

        private void GenerateClipboardResult()
        {
            Clipboard.Clear();

            var stringBuilder = new StringBuilder();
            foreach (var page in pages)
            {
                var index = page.IndexOf("youtube");
                if (index < 0)
                    index = page.LastIndexOf("/") + 1;
                var title = page.Substring(index);
                stringBuilder.AppendLine("[*][url=" + page + "]" + title + "[/url]");
            }

            Clipboard.SetText(stringBuilder.ToString());
        }

        private void TryExtractPage(string page)
        {
            if (page.Contains("kwejk"))
                ExtractSite(page);
            else
            {
                System.Diagnostics.Process.Start("firefox.exe", page);
                if (first)
                {
                    first = false;
                    System.Threading.Thread.Sleep(5000);
                }
                sitesExtracted++;
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if (!blocker)
                blocker = true;
            else
                return;
            if (extractionStop)
                Application.Current.Shutdown();
            ShowExtractionProgress();
            PlayMusic();
            ReadPages();
        }

        private void PlayMusic()
        {
            var player = new MediaPlayer();
            player.Open(musicUri);
            player.Play();
        }

        private void ShowExtractionProgress()
        {
            Button.Content = "SITES EXTRACTED: " + sitesExtracted;
            Button.Foreground = (sitesExtracted == 0) ? Brushes.Red : Brushes.Green;
        }

        private void Window_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == System.Windows.Input.Key.Space)
                extractionStop = true;
        }
    }
}

**********************************************

<Window x:Class="WebSiteExtractor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WebSiteExtractor"
        mc:Ignorable="d"
        Title="MainWindow" KeyDown="Window_KeyDown" Height="75" Width="341" WindowStartupLocation="CenterScreen" Topmost="True" ShowInTaskbar="False" ResizeMode="NoResize" WindowStyle="None">

    <Window.Resources>
        <Style x:Key="MyFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Control}">
                        <Grid Margin="3 2">
                            <Rectangle Name="r1" StrokeThickness="1" Stroke="Black" StrokeDashArray="2 2"/>
                            <Border Name="border" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"  CornerRadius="2" BorderThickness="1" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ShadowStyle">
            <Setter Property="Control.Foreground" Value="LightGray" />
        </Style>

        <Style x:Key="InformButton" TargetType="Button">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <Setter Property="FontSize" Value="11px"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource MyFocusVisual}" />
            <Setter Property="Background" >
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                        <GradientStop Color="#FFFFD190" Offset="0.2"/>
                        <GradientStop Color="Orange" Offset="0.85"/>
                        <GradientStop Color="#FFFFD190" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" 
        				BorderThickness="1"
        				Padding="4,2" 
        				BorderBrush="DarkGray" 
        				CornerRadius="3" 
        				Background="{TemplateBinding Background}">
                            <Grid >
                                <ContentPresenter HorizontalAlignment="Center" 
        	                           VerticalAlignment="Center" Name="contentShadow" 
        					Style="{StaticResource ShadowStyle}">
                                    <ContentPresenter.RenderTransform>
                                        <TranslateTransform X="1.0" Y="1.0" />
                                    </ContentPresenter.RenderTransform>
                                </ContentPresenter>
                                <ContentPresenter HorizontalAlignment="Center" 
                                    VerticalAlignment="Center" Name="content"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#FF4788c8" />
                                <Setter Property="Foreground" Value="#FF4788c8" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" >
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                            <GradientStop Color="#FFFFD190" Offset="0.35"/>
                                            <GradientStop Color="Orange" Offset="0.95"/>
                                            <GradientStop Color="#FFFFD190" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="content" Property="RenderTransform" >
                                    <Setter.Value>
                                        <TranslateTransform Y="1.0" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#FF282828" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#FF282828" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="border" Property="Opacity" Value="0.7" />
                                <Setter Property="Foreground" Value="Gray" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Button Style="{StaticResource InformButton}" Name="Button" Content="EXTRACT WEBSITES" FontSize="24" FontWeight="Bold" Foreground="Black" Click="Button_Click"></Button>
</Window>

